<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：foundation | 马栈]]></title>
  <link href="http://syljay0508.github.io/aaron/blog/categories/foundation/atom.xml" rel="self"/>
  <link href="http://syljay0508.github.io/aaron/"/>
  <updated>2014-11-05T17:49:40+08:00</updated>
  <id>http://syljay0508.github.io/aaron/</id>
  <author>
    <name><![CDATA[Aaron]]></name>
    <email><![CDATA[syljay0508@hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[内购]]></title>
    <link href="http://syljay0508.github.io/aaron/blog/nei-gou/"/>
    <updated>2014-11-04T22:19:31+08:00</updated>
    <id>http://syljay0508.github.io/aaron/blog/nei-gou</id>
    <content type="html"><![CDATA[<h3 id="section">前面的话</h3>
<p>去年做过一个项目的需求其中之一就是解锁所有功能的内购, 于是又是看官方文档又是查博客, 终于总结出来一套内购的详细过程, 分享给新手们.</p>

<h1 id="section-1">内购</h1>
<p>指通过苹果商店购买App内的虚拟物品</p>

<h4 id="section-2">完整流程</h4>

<p><img src="/images/内购流程.jpg" alt="流程" /></p>

<p>这个流程之所以会达到8步, 也得力于”越狱”的贡献, 从而产生了内购破解补丁.
作为开发者奉劝各位看官, 尽量不要越狱, 不要贪图那几个小钱.</p>

<p>其中有几点注意:</p>

<ul>
  <li>productID必须同iTunes Connect上申请的产品ID一致.</li>
  <li>虚拟机不能测试</li>
  <li>越狱设备不能测试(通过不了)</li>
</ul>

<h4 id="section-3">代码</h4>

<p>下面代码只模拟一下用户和App Store的交互过程.</p>

<ul>
  <li>添加框架<code>StoreKit.framework</code></li>
  <li>添加头文件</li>
</ul>

<p><code>objc		
#import &lt;StoreKit/StoreKit.h&gt;
</code></p>

<ul>
  <li>声明内购产品ID宏</li>
</ul>

<p><code>objc		
#define kSYLTest.testApp.testProduct @"com.syltest.testApp.testProduct"
</code></p>

<ul>
  <li>声明一个数组, 用来接收内购产品清单</li>
</ul>

<p><code>objc	
@property (nonatomic, strong) NSArray *validProducts;
</code></p>

<ul>
  <li>购买前, 先通过产品ID请求产品信息, 需要遵守协议<code>SKProductsRequestDelegate</code></li>
</ul>

<p><code>objc
	//根据产品ID实例化一个集合
	NSSet *productIdentifiers = [NSSet setWithObjects:kTutorialPointProductID,nil];
	//根据这个集合实例化内购产品信息请求
	SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:productIdentifiers];
	//设置代理
   	productsRequest.delegate = self;
   	//异步请求
   	[productsRequest start];
	......
	//协议方法
	-(void)productsRequest:(SKProductsRequest *)request didReceiveResponse:(SKProductsResponse *)response{
		SKProduct *validProduct = nil;
		//response.products是返回相关产品的数组
		int count = [response.products count];
		//数组元素个数大于0表示有产品, 否则没有产品
		if (count&gt;0) {
	        validProducts = response.products;
	        validProduct = [response.products objectAtIndex:0];
	        //通过产品ID判断对应产品
	        if ([validProduct.productIdentifier 
	           isEqualToString:kTutorialPointProductID]) {
	           //产品信息
	           NSLog("产品名称:%@", validProduct.localizedTitle);
	           NSLog("产品描述:%@", validProduct.localizedDescription);
	           NSLog("产品名称:%@", validProduct.price);
		} else {
			//没有对应产品
	        UIAlertView *tmp = [[UIAlertView alloc]
	                            initWithTitle:@"Not Available"
	                            message:@"No products to purchase"
	                            delegate:self
	                            cancelButtonTitle:nil
	                            otherButtonTitles:@"Ok", nil];
	        [tmp show];
		}    
	}
</code></p>

<ul>
  <li>触发购买事件, 遵守协议:<code>SKPaymentTransactionObserver</code></li>
</ul>

<p><code>objc	
	//判断设备能否支持购买
	if ([SKPaymentQueue canMakePayments] == YES){
		//支持购买
		//根据购买产品实例化支付对象
		 SKPayment *payment = [SKPayment paymentWithProduct:validProducts[0]];
		//设置交易观察者(代理协议)为当前对象self
       	[[SKPaymentQueue defaultQueue] addTransactionObserver:self];
       	//在支付队列中添加支付对象, 并异步请求交易
       	[[SKPaymentQueue defaultQueue] addPayment:payment];
	}else {
		NSLog("该设备不支持购买")
	}
	......
	//协议方法
	-(void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions {
	//遍历返回的交易的数组
		for (SKPaymentTransaction *transaction in transactions) {
			//transaction.transactionState枚举值:
			SKPaymentTransactionStatePurchasing,    // 这一个是应用商店是正在处理交易的状态  
			SKPaymentTransactionStatePurchased,     // 这一个是应用商店成功处理付款的状态  
			SKPaymentTransactionStateFailed,        // 这儿是应用商店处理失败的状态  
			SKPaymentTransactionStateRestored       // 这个是应用商店恢复之前的状态 
       		switch (transaction.transactionState) {
       			//判断交易结果
	            case SKPaymentTransactionStatePurchasing:
	                NSLog(@"正在交易");
	                break;                
	            case SKPaymentTransactionStatePurchased:
					if ([transaction.payment.productIdentifier isEqualToString:kTutorialPointProductID]) {
						NSLog("交易完成");
						//完成交易操作
						//code here 
					}
	                //交易完成后, 在交易队列中清除交易               
	                [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
	                break;                
	            case SKPaymentTransactionStateRestored:
	            //恢复购买               
	                NSLog(@"购买以恢复");               
	                [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
	                break;                
	            case SKPaymentTransactionStateFailed:
	                NSLog(@"交易失败");
	                break;
	            default:
	                break;
	         }
		}
	}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于静态库]]></title>
    <link href="http://syljay0508.github.io/aaron/blog/guan-yu-jing-tai-ku/"/>
    <updated>2014-11-02T22:12:03+08:00</updated>
    <id>http://syljay0508.github.io/aaron/blog/guan-yu-jing-tai-ku</id>
    <content type="html"><![CDATA[<h4 id="section">前面的话:</h4>
<p>在我自学的道路上往往遇到很多根本没有过概念的问题, 比如这篇 Blog 的主题:<code>库</code>, 这篇博文就是介绍库是怎么回事, 希望给我们新手一些帮助.</p>

<h4 id="section-1">一、什么是库？</h4>

<p>库是共享程序代码的方式，一般分为静态库和动态库。</p>

<h4 id="section-2">二、静态库与动态库的区别？</h4>

<p>静态库：链接时完整地拷贝至可执行文件中，被多次使用就有多份冗余拷贝。</p>

<p>动态库：链接时不复制，程序运行时由系统动态加载到内存，供程序调用，系统只加载一次，多个程序共用，节省内存。</p>

<h4 id="ios">三、iOS里静态库形式？</h4>

<p>.a和.framework</p>

<h4 id="ios-1">四、iOS里动态库形式？</h4>

<p>.dylib和.framework</p>

<h4 id="framework">五、framework为什么既是静态库又是动态库？</h4>

<p>系统的.framework是动态库，我们自己建立的.framework是静态库。</p>

<h4 id="aframework">六、a与.framework有什么区别？</h4>

<p>.a是一个纯二进制文件，.framework中除了有二进制文件之外还有资源文件。</p>

<p>.a文件不能直接使用，至少要有.h文件配合，.framework文件可以直接使用。</p>

<p>.a + .h + sourceFile = .framework。</p>

<p>建议用.framework.</p>

<h4 id="section-3">七、为什么要使用静态库？</h4>

<p>方便共享代码，便于合理使用。</p>

<p>实现iOS程序的模块化。可以把固定的业务模块化成静态库。</p>

<p>和别人分享你的代码库，但不想让别人看到你代码的实现。</p>

<p>开发第三方sdk的需要。</p>

<h4 id="section-4">八、制作静态库时的几点注意：</h4>

<ol>
  <li>
    <p>注意理解：无论是.a静态库还.framework静态库，我们需要的都是二进制文件+.h+其它资源文件的形式，不同的是，.a本身就是二进制文件，需要我们自己配上.h和其它文件才能使用，而.framework本身已经包含了.h和其它文件，可以直接使用。</p>
  </li>
  <li>
    <p>图片资源的处理：两种静态库，一般都是把图片文件单独的放在一个.bundle文件中，一般.bundle的名字和.a或.framework的名字相同。.bundle文件很好弄，新建一个文件夹，把它改名为.bundle就可以了，右键，显示包内容可以向其中添加图片资源。</p>
  </li>
  <li>
    <p>category是我们实际开发项目中经常用到的，把category打成静态库是没有问题的，但是在用这个静态库的工程中，调用category中的方法时会有找不到该方法的运行时错误（selector not recognized），解决办法是：在使用静态库的工程中配置other linker flags的值为-ObjC。</p>
  </li>
  <li>
    <p>如果一个静态库很复杂，需要暴露的.h比较多的话，就可以在静态库的内部创建一个.h文件（一般这个.h文件的名字和静态库的名字相同），然后把所有需要暴露出来的.h文件都集中放在这个.h文件中，而那些原本需要暴露的.h都不需要再暴露了，只需要把.h暴露出来就可以了。</p>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>
